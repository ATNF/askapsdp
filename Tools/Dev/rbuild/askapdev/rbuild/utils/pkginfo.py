## @file
# @brief helper function to turn pkgconfig files into ASKAP package.info
#
# @copyright (c) 2006 CSIRO
# Australia Telescope National Facility (ATNF)
# Commonwealth Scientific and Industrial Research Organisation (CSIRO)
# PO Box 76, Epping NSW 1710, Australia
# atnf-enquiries@csiro.au
#
# This file is part of the ASKAP software distribution.
#
# The ASKAP software distribution is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the License
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA.
#

import os
import re
import string

def _replace_vars(lst, vardict):
    '''a generator to replace allcaps variables found in .pc files
    :param lst:      a list of strings
    :param vardict: the dictionary of variable definitions
    '''
    varrx = re.compile("\$\{([A-Z_]+)\}")
    for item in lst:
        vnames = varrx.search(item)
        if vnames:
            for v in vnames.groups():
                dv = vardict.get(v, None)
                if dv is not None:
                    replaced = varrx.sub(dv, item)
                    yield replaced
        else:
            yield item


def to_info(pkgfile=None):
    '''To be executed from the build.py directory.
    This will extract the information from a pkgconfig file and
    writes it to a ASKAPsoft 'package.info' file.
    This will only work if there is not already a 'package.info'.
    @param pkgfile The path to the .pc file. Default None, means
    look for a '.pc' file in  'install/lib/pkgconfig'
    '''
    if os.path.exists("package.info"):
        # nothing to do
        return

    if not pkgfile:
        pcdir = "install/lib/pkgconfig"
        if not os.path.exists(pcdir):
            return
        files =  os.listdir(pcdir)
        if not files:
            # assume no dependencies
            return
        # there should only be one pc file
        pkgfile = os.path.join(pcdir, files[0])

    incdir = None
    libdir = None
    libs = []
    outlibs=[]
    varnames = {}
    varrx = re.compile("\$\{\w*prefix\}/")
    f = file(pkgfile)

    for line in f.readlines():
        line = line.strip()
        if line.count(":"):
            k,v = line.split(":")
            if k.startswith("Libs"):
                ls = v.split()
                for l in ls:
                    if l.startswith("-l"):
                        libs.append(l[2:])
        if line.count("="):
            k,v = line.split("=")
            if varrx.search(v):
                v =  varrx.sub("", v)
            varnames[k] = v
    f.close()

    outlibs = [i for i in _replace_vars(libs, varnames)]
    incdir = [i for i in _replace_vars([varnames["includedir"]], varnames)][0]
    if incdir == "include":
        incdir = None
    libdir = [i for i in _replace_vars([varnames["libdir"]], varnames)][0]
    if libdir == "lib":
        libdir = None

    outtxt = "# Auto-generated by build.py - DO NOT MODIFY\n"
    outtxt += "libs=%s\n" % string.join(outlibs)
    if libdir: outtxt += "libdir=%s\n" % libdir
    if incdir: outtxt += "incdir=%s\n" % incdir

    f = file("package.info", "w+")
    f.write(outtxt)
    f.close()
