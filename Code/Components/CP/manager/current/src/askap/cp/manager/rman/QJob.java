/**
 *  Copyright (c) 2011 CSIRO - Australia Telescope National Facility (ATNF)
 *  
 *  Commonwealth Scientific and Industrial Research Organisation (CSIRO)
 *  PO Box 76, Epping NSW 1710, Australia
 *  atnf-enquiries@csiro.au
 * 
 *  This file is part of the ASKAP software distribution.
 * 
 *  The ASKAP software distribution is free software: you can redistribute it
 *  and/or modify it under the terms of the GNU General Public License as
 *  published by the Free Software Foundation; either version 2 of the License,
 *  or (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 */
package askap.cp.manager.rman;

import java.io.BufferedReader;
import java.io.InputStreamReader;

import org.apache.log4j.Logger;

/**
 * An implementation of IJob which uses the qsub/qstat command line interface.
 */
public class QJob implements IJob {

	/** Logger. */
	private static Logger logger = Logger.getLogger(QJob.class.getName());
	
	/**
	 * The unique id of the job. This is just the id that is returned by
	 * qsub, and is found in qstat.
	 */
	private String itsId = null;
	
	/**
	 * Constructor
	 * @param id unique id of the job. This is just the id that is returned
	 * by qsub when the job is submitted.
	 */
	QJob(String id) {
		itsId = id;
	}
	
	/**
	 * @see askap.cp.manager.rman.IJob#status()
	 */
	public JobStatus status() {
		String cmd = "qstat -f " + itsId + "| grep job_state";
		StringBuffer stdout = new StringBuffer();
		int status = executeCommand(cmd, stdout);
		
		if (status != 0) {
			logger.info("Job query failed: " + stdout);
			return JobStatus.UNKNOWN;
		} else if (status == 153) {
			// Indicates the job was not found, so either it
			// never existed or has completed
			return JobStatus.COMPLETED;
		}
		
		// Find the character representing the state
        String stateString = "job_state = ";
        int idx = stdout.toString().indexOf(stateString);
        char state = stdout.toString().charAt(idx + stateString.length());
        switch (state) {
        case 'R':
        	return JobStatus.RUNNING;
        case 'Q':
        	return JobStatus.QUEUED;
        case 'H':
        	return JobStatus.HELD;
        case 'E':
        	return JobStatus.COMPLETED;
        case 'C':
        	return JobStatus.COMPLETED;
        default:
        	return JobStatus.COMPLETED;
        }
	}

	/**
	 * @see askap.cp.manager.rman.IJob#abort()
	 */
	public void abort() {
		String cmd = "qdel " + itsId;
		StringBuffer stdout = new StringBuffer();
		int status = executeCommand(cmd, stdout);
		if (status != 0) {
			logger.info("Job abort failed: " + stdout);
		}
	}
	
	/**
	 * Returns the unique id of the job.
	 * @return The unique if of the job.
	 */
	String getId()
	{
		return itsId;
	}
	
	/**
	 * Generated by eclipse
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode() {
		final int prime = 31;
		int result = prime * 1 + ((itsId == null) ? 0 : itsId.hashCode());
		return result;
	}

	/**
	 * Generated by eclipse
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		QJob other = (QJob) obj;
		if (itsId == null) {
			if (other.itsId != null)
				return false;
		} else if (!itsId.equals(other.itsId))
			return false;
		return true;
	}
	
	/**
	 * Wrapper around Runtime's exec() method
	 * @param cmd	command to execute
	 * @param stdout	string buffer which will be updated to contain the
	 * 					stdout from the process.
	 * @return			return code from the process of -1 if the process
	 * 					fork/exec/wait failed
	 */
	private int executeCommand(String cmd, StringBuffer stdout) {
        int status = -1;
        try {
            Process p = Runtime.getRuntime().exec(cmd);
            status = p.waitFor();

            if (status == 0) {
                BufferedReader input = new BufferedReader(
                        new InputStreamReader(
                            p.getInputStream()));
                int c = 0;
                while ((c = input.read()) != -1) {
                    stdout.append((char)c);
                }
            }
        } catch (Exception e) {
        	logger.info("executeCommand failed: " + e.getMessage());
            e.printStackTrace();
            return status;
        }
        return status;
	}

}
