// @file EpicsAdaptor.ice
//
// @copyright (c) 2009 CSIRO
// Australia Telescope National Facility (ATNF)
// Commonwealth Scientific and Industrial Research Organisation (CSIRO)
// PO Box 76, Epping NSW 1710, Australia
// atnf-enquiries@csiro.au
//
// This file is part of the ASKAP software distribution.
//
// The ASKAP software distribution is free software: you can redistribute it
// and/or modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of the License,
// or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

#ifndef ASKAP_EPICS_ADAPTOR_ICE
#define ASKAP_EPICS_ADAPTOR_ICE

#include <CommonTypes.ice>
#include <TypedValues.ice>

module askap
{

module interfaces
{
    /**
     * A point update could be one of 3 types:
     * - Normal: everything is fine, value has changed
     * - Alarm: an alarm was generated by EPICS, eg: value exceeded high alarm
     * - Error: a fatal error, eg: connection to EPICS has been lost
     */
    enum AlarmStatus {
    	Normal,
	Alarm,
	Error
    };
    
    /**
     * This is the data type represents a single EPICS record
     * name: the record name
     * timestamp: when the record is published by EPICS (POSIX timestamp)
     * value: value of the record
     * status: the type of update of this datapoint
     * statusStr: the status of record in more detail, eg: HIGH_ALARM 
     */
    struct DataPointIce {
	string		name;
	double		timestamp;
	TypedValue	value;
	AlarmStatus     status;
	string		statusStr;
    };

    interface PointPublisher {
	/**
	* Publish an array of ice points
	**/
	void publish(DataPointIce value);
    };
};
};

#endif
